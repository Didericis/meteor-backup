#!/usr/bin/env node

var path = require('path');
var program = require('commander');
var fs = require('fs');
var util = require('./lib/util.js');

var commands = {
    'restore': require('./lib/restore'),
    'dump': require('./lib/dump'),
    'sync': require('./lib/sync')
};
var configJson = util.getConfig();
var packageJson = require(path.join(__dirname, 'package.json'));;

var parseOptions = function parseOptions(program) {
    var configchanged = false;
    var programDir;

    if (program.dir) {
        programDir = path.resolve(program.dir);
        console.log('Setting backup directory to ' + programDir + '...');
        configJson.backupDir = programDir;
        configchanged = true;
    }
    if (program.lhost) {
        console.log('Setting localhost to ' + program.lhost + '...');
        configJson.local.host = program.lhost;
        configchanged = true;
    }
    if (program.lport) {
        console.log('Setting local port to ' + program.lport + '...');
        configJson.local.port = program.lport;
        configchanged = true;
    }
    if (program.host) {
        console.log('Setting remote host to ' + program.host + '...');
        configJson.remote.host = program.host;
        configchanged = true;
    }
    if (program.port) {
        console.log('Setting remote port to ' + program.port + '...');
        configJson.remote.port = program.port;
        configchanged = true;
    }
    if (program.db) {
        console.log('Setting remote db to ' + program.db + '...');
        configJson.remote.db = program.db;
        configchanged = true;
    }
    if (program.auth) {
        console.log('Setting remote auth db to ' + program.auth + '...');
        configJson.remote.auth = program.auth;
        configchanged = true;
    }

    if (program.info) {
        console.log(JSON.stringify(configJson, null, 4));
    }

    if (configchanged && program.save) {
        console.log('Saving config...');
        util.saveConfig(configJson);
    }
}

var parsedOptions = false;
program
    .version(packageJson.version)
    .option('-D, --dir [path]', 'change backup directory')
    .option('-H, --localhost [value]', 'change local host')
    .option('-P, --localport [value]', 'change local port')
    .option('-h, --host [value]', 'change remote host')
    .option('-p, --port [value]', 'change remote port')
    .option('-d, --db [value]', 'change remote db')
    .option('-a --auth [value]', 'change auth db')
    .option('-s, --save', 'save settings')
    .option('-i, --info', 'output config settings')
    .arguments('[command]')
    .action(function(command) {
        parseOptions(program);
        if (commands[command]) {
            commands[command](function() {
                console.log('\u001B[2J\u001B[0;0f');
                console.log('Done!');
            });
        } else {
            console.log('Command "' + command + '" not understood');
        }
    })
    .parse(process.argv);

if (!parsedOptions) {
    parseOptions(program);
}
